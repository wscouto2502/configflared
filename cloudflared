#!/bin/bash

menu_principal() {
    while true; do
        clear

        echo "O que deseja fazer?

        [00]: Listar todos os IPs da maquina
        [01]: Configurar IP Fixo
        [02]: voltar a configura√ß√£o inicial do IP
        [03]: Configurar Tunnel CloudFlared   
        [xx]: Sair do instalador
        
        "

        read -p "Digite sua op√ß√£o: " opcao1

        case $opcao1 in
            0|00)
                todos_ips
                ;;
            1|01)
                serve_local_ip_fixo
                ;;
            2|02)
                serve_local_ip_fixo_retorno
                ;;
            3|03)
                #listar ip
                tunnel_cloudflared
                ;;    
            sair|fechar|exit|close|x|xx|XX|X)
                clear
                echo "Obrigado por utilizar!"
                break
                ;;
            *)
                echo "Op√ß√£o inv√°lida. Pressione Enter para continuar..."
                read
                ;;
        esac
        echo ""
    done
}

serve_local_ip_fixo() {
    clear
    while true; do
        echo "Dados das Interfaces disponiveis"
        echo "------------------------------------------"
        dados_interface

        read -p "Digite o nome da placa de rede (ex: enp0s3): " interface
        read -p "Digite o endere√ßo IP com a m√°scara (ex: 192.168.0.10/24): " ip_address
        read -p "Digite o gateway, IP do roteador (ex: 192.168.0.1): " gateway
        echo "Digite o(s) servidor(es) DNS separados por espa√ßo (ex: 1.1.1.1 8.8.8.8):"
        read -a dns_servers

        clear
        echo -e "\e[33mNome da placa de rede:\e[97m $interface\e[0m"
        echo -e "\e[33mIP da m√°quina:\e[97m $ip_address\e[0m"
        echo -e "\e[33mGateway:\e[97m $gateway\e[0m"
        echo -e "\e[33mDNS:\e[97m ${dns_servers[*]}\e[0m"
        echo ""

        read -p "As respostas est√£o corretas? (Y/N): " confirmacao
        if [[ "$confirmacao" =~ ^[Yy]$ ]]; then
            break
        else
            clear
        fi
    done

    echo "Gerando arquivo de configura√ß√£o..."
    config=$(cat <<EOF
network:
  version: 2
  ethernets:
    $interface:
      dhcp4: no
      addresses:
        - $ip_address
      routes:
        - to: default
          via: $gateway
      nameservers:
        addresses:
$(for dns in "${dns_servers[@]}"; do echo "          - $dns"; done)
EOF
)

    echo "$config" | sudo tee /etc/netplan/%0.yaml > /dev/null

    chmod -R 755 /etc/netplan

    clear
    echo -e "\nAplicando configura√ß√µes..."
    echo ""
    echo -e "\nLista de ip(s) da maquina antes da atualiza√ß√£o:"
    echo ""
    ip -o -4 addr show | awk '!/ lo / && !/docker/ && !/veth/ {split($4, a, "/"); print a[1]}'
    echo ""
    echo "seu ip que selecionou: $ip_address"
    echo ""
    echo "Aguarde aplicando paremetros..."
    sudo netplan apply > /dev/null 2>&1
    read -p "Concluido! Pressione Enter para voltar ao menu..."
}












tunnel_cloudflared() {
    clear
    echo "\nüîÑ Verificando instala√ß√£o do Cloudflared..."

    if ! command -v cloudflared &> /dev/null; then
        echo "‚öôÔ∏è  Cloudflared n√£o encontrado. Instalando..."
        sudo curl -fsSL https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64 \
            -o /usr/local/bin/cloudflared
        sudo chmod +x /usr/local/bin/cloudflared
    else
        echo "üîÑ Atualizando Cloudflared..."
        sudo cloudflared update
    fi

    
    echo "\nüîê Verificando login do Cloudflared..."
    cred_file=$(find /root/.cloudflared -name '*.json' | head -n 1)

    if [ -z "$cred_file" ]; then
        echo "üß© Realizando login no Cloudflare..."
        login_output=$(cloudflared tunnel login --no-autoupdate 2>&1)
        link=$(echo "$login_output" | grep -i 'https://dash.cloudflare.com/argotunnel')

        if [ -n "$link" ]; then
            echo -e "\nüîó Abra o link abaixo no navegador e autentique-se:\n$link"
            read -p "Ap√≥s completar a autentica√ß√£o, pressione ENTER para continuar..."
            cred_file=$(find /root/.cloudflared -name '*.json' | head -n 1)
        else
            echo -e "\n‚ùå Falha ao obter o link de autentica√ß√£o. Sa√≠da completa:"
            echo "$login_output"
            exit 1
        fi
    fi





    config_tunel_file="/etc/cloudflared/conftunel"

    if [ ! -f "$config_tunel_file" ]; then
        echo "\nüîÄ Gerando identificador aleat√≥rio para o t√∫nel..."
        tunel_nome="tunnel_$(openssl rand -hex 6)"
        tunel_id=$(cloudflared tunnel create $tunel_nome 2>&1 | grep -oP '(?<=Created tunnel [^ ]+ with id )[a-f0-9\-]+')

        if [ -z "$tunel_id" ]; then
            echo "‚ùå Erro ao criar t√∫nel."
            exit 1
        fi

        echo "$tunel_nome=$tunel_id" | sudo tee "$config_tunel_file" > /dev/null
    else
        echo "\nüìÇ Lendo configura√ß√£o existente..."
        tunel_nome=$(cut -d '=' -f 1 "$config_tunel_file")
        tunel_id=$(cut -d '=' -f 2 "$config_tunel_file")
    fi

    echo "\nüåê Digite os dom√≠nios separados por espa√ßo (ex: exemplo.com app.exemplo.com):"
    read dominios

    config_path="/etc/cloudflared/config.yml"

    sudo mkdir -p /etc/cloudflared

    echo "tunnel: $tunel_id" | sudo tee "$config_path" > /dev/null
    echo "credentials-file: $cred_file" | sudo tee -a "$config_path" > /dev/null
    echo "ingress:" | sudo tee -a "$config_path" > /dev/null

    for dominio in $dominios; do
        echo "  - hostname: \"$dominio\"" | sudo tee -a "$config_path" > /dev/null
        echo "    service: https://localhost" | sudo tee -a "$config_path" > /dev/null
        echo "    originRequest:" | sudo tee -a "$config_path" > /dev/null
        echo "      noTLSVerify: true" | sudo tee -a "$config_path" > /dev/null
        echo "" | sudo tee -a "$config_path" > /dev/null

        if [[ $dominio != \** ]]; then
            echo "  - hostname: \"*.$dominio\"" | sudo tee -a "$config_path" > /dev/null
            echo "    service: https://localhost" | sudo tee -a "$config_path" > /dev/null
            echo "    originRequest:" | sudo tee -a "$config_path" > /dev/null
            echo "      noTLSVerify: true" | sudo tee -a "$config_path" > /dev/null
            echo "" | sudo tee -a "$config_path" > /dev/null
        fi
    done

    echo "  - service: http_status:404" | sudo tee -a "$config_path" > /dev/null

    echo "\nüîç Verificando entradas DNS para o t√∫nel..."
    dns_entries=$(cloudflared tunnel route dns $tunel_nome list 2>/dev/null | grep -v "NAME" | awk '{print $2}')

    if [ -z "$dns_entries" ]; then
        echo "Nenhuma entrada DNS encontrada."
        while true; do
            read -p "Digite o nome do DNS que deseja criar: " dns_nome
            cloudflared tunnel route dns $tunel_nome "$dns_nome"
            if [ $? -eq 0 ]; then
                break
            else
                echo "‚ö†Ô∏è  Nome em uso ou erro. Tente outro."
            fi
        done
    else
        echo "Entradas DNS j√° existentes:\n$dns_entries"
    fi

    echo "\nüõ†Ô∏è Verificando servi√ßo Cloudflared..."
    if ! systemctl list-unit-files | grep -q cloudflared.service; then
        echo "Instalando servi√ßo..."
        sudo cloudflared service install
    fi

    sudo systemctl enable cloudflared
    sudo systemctl start cloudflared
    sudo systemctl restart cloudflared

    echo "\nüìä Status do servi√ßo Cloudflared:"
    sudo systemctl status cloudflared --no-pager
}















































serve_local_ip_fixo_retorno() {
    sudo rm -rf /etc/netplan/%0.yaml
    echo "Dados das Interfaces disponiveis antes da restaura√ß√£o"
    echo "------------------------------------------"
    dados_interface
    echo -e "\nCaso esteja utilizando acesso remoto reconecte com o servidor com o novo IP!"
    
    chmod -R 755 /etc/netplan
    echo "Aguarde aplicando paremetros..."
    sudo netplan apply > /dev/null 2>&1
    echo ""
    read -p "Concluido! Pressione Enter para voltar ao menu..."
}

todos_ips(){
    clear
    echo "Dados das Interfaces disponiveis"
    dados_interface
    echo ""  # quebra de linha
    read -p "Concluido! Pressione Enter para voltar ao menu..."
}

dados_interface(){

# Lista todas as interfaces ativas (excluindo virtuais e loopback)
interfaces=$(ip -o link show | awk -F': ' '/^[0-9]+: / && $2 !~ /(lo|veth|docker|br-|virbr|vmnet|tun|wg)/ {print $2}')

for iface in $interfaces; do
    # Coleta todos os IPs IPv4 com m√°scara atribu√≠dos √† interface
    ip_cidrs=$(ip -4 addr show dev "$iface" | grep -oP '(?<=inet\s)\d+(\.\d+){3}/\d+')

    if [ -n "$ip_cidrs" ]; then
        # Tenta obter o gateway para essa interface
        gateway=$(ip route show dev "$iface" | awk '/default/ {print $3}')

        # Obt√©m os servidores DNS (se systemd-resolved estiver ativo)
        dns=$(resolvectl dns "$iface" 2>/dev/null | awk '{$1=""; print $0}' | sed 's/^ *//')

        echo "Interface: $iface"
        
        # Lista todos os IPs
        echo "$ip_cidrs" | while read -r ip; do
            echo "  IP:       $ip"
        done

        echo "  Gateway:  ${gateway:-N/A}"
        echo "  DNS:      ${dns:-N/A}"
        echo ""
    fi
done
}



# Iniciar o script
menu_principal
